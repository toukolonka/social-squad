{"version":3,"sources":["context/auth.js","util/AuthRoute.js","util/NonAuthRoute.js","theme.js","components/MenuBar.js","util/graphql.js","util/MyPopup.js","components/LikeButton.js","components/DeleteButton.js","components/PostCard.js","components/PostList.js","util/hooks.js","components/PostForm.js","pages/Home.js","pages/Login.js","pages/Register.js","pages/SinglePost.js","pages/User.js","App.js","ApolloProvider.js","index.js"],"names":["initialState","user","localStorage","getItem","decodedToken","jwtDecode","exp","Date","now","removeItem","AuthContext","createContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","useReducer","dispatch","Provider","value","setItem","token","AuthRoute","Component","component","rest","useContext","render","to","NonAuthRoute","theme","colors","primary","secondary","MenuBar","pathname","useLocation","path","substr","Menu","pointing","size","color","Item","name","active","as","Link","position","onClick","FETCH_POSTS_QUERY","gql","CREATE_POST_MUTATION","LOGIN_USER","REGISTER_USER","LIKE_POST_MUTATION","SUBMIT_COMMENT_MUTATION","FETCH_POST_QUERY","DELETE_POST_MUTATION","DELETE_COMMENT_MUTATION","POST_ADDED","POST_DELETED","LIKE_ADDED","LIKE_DELETED","COMMENT_ADDED","COMMENT_DELETED","MyPopup","content","children","Popup","inverted","trigger","LikeButton","post","id","likeCount","likes","useState","liked","setLiked","useEffect","find","like","username","useMutation","variables","postId","likePost","likeButton","Button","Icon","basic","labelPosition","Label","DeleteButton","commentId","callback","confirmOpen","setConfirmOpen","mutation","update","proxy","deletePostOrComment","floated","style","margin","Confirm","open","onCancel","onConfirm","PostCard","history","useHistory","body","createdAt","commentCount","match","useRouteMatch","Card","fluid","Content","Image","className","src","img","Meta","href","moment","fromNow","Description","extra","push","PostList","meMatch","userId","params","useQuery","pollInterval","loading","data","client","useApolloClient","useSubscription","onSubscriptionData","subscriptionData","console","log","addedPost","set","object","dataInStore","readQuery","query","getPosts","map","p","includes","writeQuery","concat","updateCacheWith","newPost","delPost","postsAfter","filter","updateCacheWithDel","deletedPost","posts","columns","isMobile","length","Grid","Row","Transition","Group","Column","marginBottom","useForm","values","setValues","onChange","event","target","onSubmit","preventDefault","PostForm","createPost","error","fluidBoolean","Form","Field","TextArea","rows","placeholder","fontSize","disabled","trim","graphQLErrors","Home","Login","context","errors","setErrors","loginUser","password","_","onError","err","extensions","exception","noValidate","Input","label","autoCapitalize","Object","keys","Register","addUser","email","confirmPassword","register","SinglePost","postMarkup","commentInputRef","useRef","comment","setComment","current","blur","submitComment","addedComment","newComment","getPost","comments","delComment","deletedComment","commentsAfter","c","updateCacheWithDelCom","addedLike","newLike","updateCacheWithLike","delLike","deletedLike","likesAfter","updateCacheWithDelLike","ref","Header","User","App","Container","exact","httpLink","HttpLink","uri","authLink","setContext","headers","Authorization","wsURL","window","location","origin","replace","wsLink","WebSocketLink","options","reconnect","splitLink","split","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","link","ReactDOM","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.051d2363.chunk.js","sourcesContent":["import React, { useReducer, createContext } from 'react'\r\nimport jwtDecode from 'jwt-decode'\r\n\r\nconst initialState = {\r\n  user: null,\r\n}\r\n\r\nif (localStorage.getItem('jwtToken')) {\r\n  const decodedToken = jwtDecode(localStorage.getItem('jwtToken'))\r\n\r\n  if (decodedToken.exp * 1000 < Date.now()) {\r\n    localStorage.removeItem('jwtToken')\r\n  } else {\r\n    initialState.user = decodedToken\r\n  }\r\n}\r\n\r\nconst AuthContext = createContext({\r\n  user: null,\r\n  login: (userData) => {},\r\n  logout: () => {},\r\n})\r\n\r\nfunction authReducer(state, action) {\r\n  switch (action.type) {\r\n    case 'LOGIN':\r\n      return {\r\n        ...state,\r\n        user: action.payload,\r\n      }\r\n    case 'LOGOUT':\r\n      return {\r\n        ...state,\r\n        user: null,\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction AuthProvider(props) {\r\n  const [state, dispatch] = useReducer(authReducer, initialState)\r\n\r\n  function login(userData) {\r\n    localStorage.setItem('jwtToken', userData.token)\r\n    dispatch({\r\n      type: 'LOGIN',\r\n      payload: userData,\r\n    })\r\n  }\r\n\r\n  function logout() {\r\n    localStorage.removeItem('jwtToken')\r\n    dispatch({ type: 'LOGOUT' })\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{ user: state.user, login, logout }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { AuthContext, AuthProvider }\r\n","import React, { useContext } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction AuthRoute({ component: Component, ...rest }) {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        user ? <Redirect to=\"/\" /> : <Component {...props} />\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default AuthRoute;","import React, { useContext } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n\r\nimport { AuthContext } from '../context/auth';\r\n\r\nfunction NonAuthRoute({ component: Component, ...rest }) {\r\n  const { user } = useContext(AuthContext);\r\n\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        user ? <Component {...props} /> : <Redirect to=\"/\" />\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default NonAuthRoute;","const theme = {\r\n    colors: {\r\n      primary: 'blue',\r\n      secondary: 'purple',\r\n    },\r\n}\r\n\r\nexport default theme","import React, { useContext } from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport { Link, useLocation } from 'react-router-dom'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport theme from '../theme'\r\n\r\nconst MenuBar = () => {\r\n  const { user, logout } = useContext(AuthContext)\r\n  const location = useLocation()\r\n  const pathname = location.pathname\r\n\r\n  const path = pathname === '/' ? 'home' : pathname.substr(1)\r\n\r\n  const menuBar = user ? (\r\n    <Menu pointing secondary size=\"massive\" color={theme.colors.primary}>\r\n      <Menu.Item name=\"home\" active={path === 'home'}  as={Link} to=\"/\" />\r\n      <Menu.Item name=\"me\" active={path === 'me'}  as={Link} to=\"/me\" />\r\n      <Menu.Menu position=\"right\">\r\n        <Menu.Item name='logout' onClick={logout} />\r\n      </Menu.Menu>\r\n    </Menu>\r\n  ) : (\r\n    <Menu pointing secondary size=\"massive\" color={theme.colors.primary}>\r\n      <Menu.Item\r\n        name=\"home\"\r\n        active={path === 'home'}\r\n        \r\n        as={Link}\r\n        to=\"/\"\r\n      />\r\n\r\n      <Menu.Menu position=\"right\">\r\n        <Menu.Item\r\n          name=\"login\"\r\n          active={path === 'login'}\r\n          \r\n          as={Link}\r\n          to=\"/login\"\r\n        />\r\n        <Menu.Item\r\n          name=\"register\"\r\n          active={path === 'register'}\r\n          \r\n          as={Link}\r\n          to=\"/register\"\r\n        />\r\n      </Menu.Menu>\r\n    </Menu>\r\n  )\r\n\r\n  return menuBar\r\n}\r\n\r\nexport default MenuBar\r\n","import gql from 'graphql-tag'\r\n\r\nexport const FETCH_POSTS_QUERY = gql`\r\n  query($userId: ID) {\r\n    getPosts(userId: $userId) {\r\n      user {\r\n        id\r\n        email\r\n        username\r\n        createdAt\r\n        img\r\n      }\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likeCount\r\n      likes {\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const CREATE_POST_MUTATION = gql`\r\n  mutation createPost($body: String!) {\r\n    createPost(body: $body) {\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likes {\r\n        id\r\n        username\r\n        createdAt\r\n      }\r\n      likeCount\r\n      comments {\r\n        id\r\n        body\r\n        username\r\n        createdAt\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`\r\n\r\nexport const LOGIN_USER = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n      img\r\n    }\r\n  }\r\n`\r\n\r\nexport const REGISTER_USER = gql`\r\n  mutation register(\r\n    $username: String!\r\n    $email: String!\r\n    $password: String!\r\n    $confirmPassword: String!\r\n  ) {\r\n    register(\r\n      registerInput: {\r\n        username: $username\r\n        email: $email\r\n        password: $password\r\n        confirmPassword: $confirmPassword\r\n      }\r\n    ) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n    }\r\n  }\r\n`\r\nexport const GET_USER = gql`\r\n  query($userId: ID!) {\r\n    getUser(userId: $userId) {\r\n      id\r\n      email\r\n      username\r\n      createdAt\r\n      img\r\n      posts {\r\n        id\r\n        body\r\n        username\r\n        createdAt\r\n        likeCount\r\n        commentCount\r\n        comments {\r\n          id\r\n          createdAt\r\n          username\r\n          body\r\n        }\r\n        likes {\r\n          id\r\n          createdAt\r\n          username\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const LIKE_POST_MUTATION = gql`\r\n  mutation likePost($postId: ID!) {\r\n    likePost(postId: $postId) {\r\n      id\r\n      likes {\r\n        id\r\n        username\r\n      }\r\n      likeCount\r\n    }\r\n  }\r\n`\r\n\r\nexport const SUBMIT_COMMENT_MUTATION = gql`\r\n  mutation($postId: ID!, $body: String!) {\r\n    createComment(postId: $postId, body: $body) {\r\n      id\r\n      comments {\r\n        id\r\n        body\r\n        createdAt\r\n        username\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`\r\n\r\nexport const FETCH_POST_QUERY = gql`\r\n  query($postId: ID!) {\r\n    getPost(postId: $postId) {\r\n      user {\r\n        id\r\n        email\r\n        username\r\n        createdAt\r\n        img\r\n      }\r\n      id\r\n      body\r\n      createdAt\r\n      username\r\n      likeCount\r\n      likes {\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const DELETE_POST_MUTATION = gql`\r\n  mutation deletePost($postId: ID!) {\r\n    deletePost(postId: $postId)\r\n  }\r\n`\r\n\r\nexport const DELETE_COMMENT_MUTATION = gql`\r\n  mutation deleteComment($postId: ID!, $commentId: ID!) {\r\n    deleteComment(postId: $postId, commentId: $commentId) {\r\n      id\r\n      comments {\r\n        id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n      commentCount\r\n    }\r\n  }\r\n`\r\n\r\nexport const POST_ADDED = gql`\r\n  subscription {\r\n    newPost {\r\n      id\r\n      body\r\n      username\r\n      createdAt\r\n      comments {\r\n        id\r\n        createdAt\r\n        username\r\n        body\r\n      }\r\n      likes {\r\n        id\r\n        createdAt\r\n        username\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nexport const POST_DELETED = gql`\r\n  subscription {\r\n    deletedPost {\r\n      id\r\n      body\r\n      username\r\n    }\r\n  }\r\n`\r\n\r\nexport const LIKE_ADDED = gql`\r\n  subscription {\r\n    newLike {\r\n      id\r\n      createdAt\r\n      username\r\n    }\r\n  }\r\n`\r\n\r\nexport const LIKE_DELETED = gql`\r\n  subscription {\r\n    deletedLike {\r\n      id\r\n      createdAt\r\n      username\r\n    }\r\n  }\r\n`\r\n\r\nexport const COMMENT_ADDED = gql`\r\n  subscription {\r\n    newComment {\r\n      id\r\n      createdAt\r\n      username\r\n      body\r\n    }\r\n  }\r\n`\r\n\r\nexport const COMMENT_DELETED = gql`\r\n  subscription {\r\n    deletedComment {\r\n      id\r\n      createdAt\r\n      username\r\n      body\r\n    }\r\n  }\r\n`\r\n","import { Popup } from 'semantic-ui-react';\r\nimport React from 'react';\r\n\r\nfunction MyPopup({ content, children }) {\r\n  return <Popup inverted content={content} trigger={children} />;\r\n}\r\n\r\nexport default MyPopup;","import React, { useEffect, useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { useMutation } from '@apollo/client'\r\nimport { Button, Label, Icon } from 'semantic-ui-react'\r\n\r\nimport { LIKE_POST_MUTATION } from '../util/graphql'\r\nimport theme from '../theme'\r\nimport MyPopup from '../util/MyPopup'\r\n\r\nfunction LikeButton({ user, post: { id, likeCount, likes } }) {\r\n  const [liked, setLiked] = useState(false)\r\n\r\n  useEffect(() => {\r\n    if (user && likes.find((like) => like.username === user.username)) {\r\n      setLiked(true)\r\n    } else setLiked(false)\r\n  }, [user, likes])\r\n\r\n  const [likePost] = useMutation(LIKE_POST_MUTATION, {\r\n    variables: { postId: id },\r\n  })\r\n\r\n  const likeButton = user ? (\r\n    liked ? (\r\n      <Button color={theme.colors.primary} size=\"small\">\r\n        <Icon name=\"thumbs up outline\" size=\"large\" />\r\n      </Button>\r\n    ) : (\r\n      <Button color={theme.colors.primary} basic size=\"small\">\r\n        <Icon name=\"thumbs up outline\" size=\"large\" />\r\n      </Button>\r\n    )\r\n  ) : (\r\n    <Button\r\n      as={Link}\r\n      to=\"/login\"\r\n      color={theme.colors.primary}\r\n      basic\r\n      size=\"small\"\r\n    >\r\n      <Icon name=\"thumbs up outline\" size=\"large\" />\r\n    </Button>\r\n  )\r\n\r\n  return (\r\n    <Button as=\"div\" labelPosition=\"right\" onClick={likePost}>\r\n      <MyPopup content={liked ? 'Unlike' : 'Like'}>{likeButton}</MyPopup>\r\n      <Label basic color={theme.colors.primary} pointing=\"left\">\r\n        {likeCount}\r\n      </Label>\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default LikeButton\r\n","import React, { useState } from 'react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { Button, Confirm, Icon } from 'semantic-ui-react'\r\n\r\nimport {\r\n  DELETE_POST_MUTATION,\r\n  DELETE_COMMENT_MUTATION,\r\n} from '../util/graphql'\r\n\r\nfunction DeleteButton({ postId, commentId, callback }) {\r\n  \r\n  const [confirmOpen, setConfirmOpen] = useState(false)\r\n\r\n  const mutation = commentId ? DELETE_COMMENT_MUTATION : DELETE_POST_MUTATION\r\n\r\n  const [deletePostOrComment] = useMutation(mutation, {\r\n    update(proxy) {\r\n      setConfirmOpen(false)\r\n      \r\n      if (callback) callback()\r\n    },\r\n    variables: {\r\n      postId,\r\n      commentId,\r\n    },\r\n  })\r\n  return (\r\n    <>\r\n      <Button\r\n        as=\"div\"\r\n        color=\"red\"\r\n        floated=\"right\"\r\n        onClick={() => setConfirmOpen(true)}\r\n      >\r\n        <Icon name=\"trash\" style={{ margin: 0 }} />\r\n      </Button>\r\n      <Confirm\r\n        open={confirmOpen}\r\n        onCancel={() => setConfirmOpen(false)}\r\n        onConfirm={deletePostOrComment}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default DeleteButton\r\n","import React, { useContext } from 'react'\r\nimport { Button, Card, Icon, Label, Image } from 'semantic-ui-react'\r\nimport { Link, useHistory, useRouteMatch } from 'react-router-dom'\r\nimport moment from 'moment'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport LikeButton from './LikeButton'\r\nimport DeleteButton from './DeleteButton'\r\nimport MyPopup from '../util/MyPopup'\r\nimport theme from '../theme'\r\n\r\nfunction PostCard({ post }) {\r\n  const { user } = useContext(AuthContext)\r\n  const history = useHistory()\r\n  const { body, createdAt, id, username, likeCount, commentCount, likes } = post\r\n  const match = useRouteMatch('/posts')\r\n\r\n  function deletePostCallback() {\r\n    if (match) history.push('/')\r\n  }\r\n\r\n  return (\r\n    <Card fluid>\r\n      <Card.Content>\r\n        <Image\r\n          floated=\"right\"\r\n          className=\"ui tiny circular image\"\r\n          src={post.user.img}\r\n        />\r\n        <Link className=\"header\" to={`/users/${post.user.id}`}>\r\n          {username}\r\n        </Link>\r\n        <Card.Meta>\r\n          <a href={`/posts/${id}`}>{moment(createdAt).fromNow(true)}</a>\r\n        </Card.Meta>\r\n        <Card.Description>\r\n          <Link style={{ color: 'black' }} to={`/posts/${id}`}>\r\n            {body}\r\n          </Link>\r\n        </Card.Description>\r\n      </Card.Content>\r\n      <Card.Content extra>\r\n        <LikeButton user={user} post={{ id, likes, likeCount }} />\r\n        <MyPopup content=\"Comment on post\">\r\n          <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\r\n            <Button color={theme.colors.primary} basic size=\"small\">\r\n              <Icon name=\"comments\" size=\"large\" />\r\n            </Button>\r\n            <Label basic color=\"blue\" pointing=\"left\">\r\n              {commentCount}\r\n            </Label>\r\n          </Button>\r\n        </MyPopup>\r\n        {user && user.username === username && !match && (\r\n          <DeleteButton postId={id} callback={deletePostCallback} />\r\n        )}\r\n      </Card.Content>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default PostCard\r\n","import React, { useContext } from 'react'\r\nimport { useQuery, useApolloClient, useSubscription } from '@apollo/client'\r\nimport { Grid, Transition } from 'semantic-ui-react'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { useRouteMatch } from 'react-router-dom'\r\n\r\nimport PostCard from '../components/PostCard'\r\nimport { FETCH_POSTS_QUERY, POST_ADDED, POST_DELETED } from '../util/graphql'\r\nimport { AuthContext } from '../context/auth'\r\n\r\nconst PostList = () => {\r\n  const meMatch = useRouteMatch('/me')\r\n  const match = useRouteMatch('/users/:userId')\r\n  const { user } = useContext(AuthContext)\r\n  let userId = match ? match.params.userId : null\r\n  userId = meMatch ? user.id : userId\r\n\r\n  const { loading, data } = useQuery(FETCH_POSTS_QUERY, {\r\n    variables: {\r\n      userId: userId,\r\n    },\r\n    pollInterval: 10000,\r\n  })\r\n\r\n  const client = useApolloClient()\r\n\r\n  const updateCacheWith = (addedPost) => {\r\n    const includedIn = (set, object) => set.map((p) => p.id).includes(object.id)\r\n\r\n    const dataInStore = client.readQuery({\r\n      query: FETCH_POSTS_QUERY,\r\n      variables: {\r\n        userId: userId,\r\n      },\r\n    })\r\n    if (!includedIn(dataInStore.getPosts, addedPost)) {\r\n      client.writeQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n        data: { getPosts: dataInStore.getPosts.concat(addedPost) },\r\n        variables: {\r\n          userId: userId,\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  useSubscription(POST_ADDED, {\r\n    onSubscriptionData: ({ subscriptionData }) => {\r\n      console.log(subscriptionData)\r\n      const addedPost = subscriptionData.data.newPost\r\n      updateCacheWith(addedPost)\r\n    },\r\n  })\r\n\r\n  const updateCacheWithDel = (delPost) => {\r\n    const dataInStore = client.readQuery({\r\n      query: FETCH_POSTS_QUERY,\r\n      variables: {\r\n        userId: userId,\r\n      },\r\n    })\r\n    const postsAfter = dataInStore.getPosts.filter((p) => p.id !== delPost.id)\r\n    client.writeQuery({\r\n      query: FETCH_POSTS_QUERY,\r\n      data: { getPosts: postsAfter },\r\n      variables: {\r\n        userId: userId,\r\n      },\r\n    })\r\n  }\r\n\r\n  useSubscription(POST_DELETED, {\r\n    onSubscriptionData: ({ subscriptionData }) => {\r\n      console.log(subscriptionData)\r\n      const delPost = subscriptionData.data.deletedPost\r\n      updateCacheWithDel(delPost)\r\n    },\r\n  })\r\n\r\n  if (loading) {\r\n    return <div>loading...</div>\r\n  }\r\n\r\n  const posts = data.getPosts\r\n  const columns = isMobile ? 1 : 3\r\n\r\n  if (posts.length < 1) {\r\n    return (\r\n      <div>\r\n        <Grid>\r\n          <Grid.Row className=\"page-title\">\r\n            <h3>No posts yet</h3>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid>\r\n        <Grid.Row columns={columns}>\r\n          {loading ? (\r\n            <h1>Loading posts..</h1>\r\n          ) : (\r\n            <Transition.Group>\r\n              {posts &&\r\n                posts.map((post) => (\r\n                  <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\r\n                    <PostCard post={post} />\r\n                  </Grid.Column>\r\n                ))}\r\n            </Transition.Group>\r\n          )}\r\n        </Grid.Row>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PostList\r\n","import { useState } from 'react'\r\n\r\nexport const useForm = (callback, initialState = {}) => {\r\n    const [values, setValues] = useState(initialState)\r\n\r\n    const onChange = (event) => {\r\n        setValues({ ...values, [event.target.name]: event.target.value })\r\n      }\r\n\r\n    const onSubmit = event => {\r\n        event.preventDefault()\r\n        callback()\r\n    }\r\n\r\n    return {\r\n        onChange,\r\n        onSubmit,\r\n        values\r\n    }\r\n}","import React from 'react'\r\nimport { Button, Form, TextArea } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/client'\r\nimport { isMobile } from 'react-device-detect'\r\n\r\nimport { useForm } from '../util/hooks'\r\nimport { CREATE_POST_MUTATION } from '../util/graphql'\r\nimport theme from '../theme'\r\n\r\nfunction PostForm() {\r\n  const { values, onChange, onSubmit } = useForm(createPostCallback, {\r\n    body: '',\r\n  })\r\n\r\n  const [createPost, { error }] = useMutation(CREATE_POST_MUTATION, {\r\n    variables: values,\r\n    update() {\r\n      values.body = '';\r\n    }\r\n  });\r\n\r\n  function createPostCallback() {\r\n    createPost()\r\n  }\r\n\r\n  let fluidBoolean = isMobile\r\n\r\n  return (\r\n    <>\r\n      <Form onSubmit={onSubmit}>\r\n        <Form.Field>\r\n          <TextArea\r\n            rows={3}\r\n            placeholder=\"What is on your mind?\"\r\n            name=\"body\"\r\n            onChange={onChange}\r\n            value={values.body}\r\n            error={error ? error : null}\r\n            style={{ marginBottom: 10, fontSize: 16 }}\r\n          />\r\n          <Button fluid={fluidBoolean} size='large' type=\"submit\" color={theme.colors.primary} disabled={values.body.trim() === ''}>\r\n            Submit\r\n          </Button>\r\n        </Form.Field>\r\n      </Form>\r\n      {error && (\r\n        <div className=\"ui error message\" style={{ marginBottom: 20 }}>\r\n          <ul className=\"list\">\r\n            <li>{error.graphQLErrors[0]}</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PostForm\r\n","import React, { useContext } from 'react'\r\nimport { Grid } from 'semantic-ui-react'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport PostList from '../components/PostList'\r\nimport PostForm from '../components/PostForm'\r\n\r\nconst Home = () => {\r\n  const { user } = useContext(AuthContext)\r\n  \r\n  return (\r\n    <div>\r\n      <Grid>\r\n        <Grid.Row className=\"page-title\">\r\n          <h1>Social World</h1>\r\n        </Grid.Row>\r\n        {user && (\r\n          <Grid.Row>\r\n            <Grid.Column>\r\n              <PostForm />\r\n            </Grid.Column>\r\n          </Grid.Row>\r\n        )}\r\n        </Grid>\r\n        <PostList />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","import React, { useContext, useState } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/client'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport { useForm } from '../util/hooks'\r\nimport { LOGIN_USER } from '../util/graphql'\r\n\r\nfunction Login(props) {\r\n  const context = useContext(AuthContext)\r\n  const [errors, setErrors] = useState({})\r\n\r\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\r\n    username: '',\r\n    password: '',\r\n  })\r\n\r\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\r\n    update(_, { data: { login: userData } }) {\r\n      context.login(userData)\r\n      props.history.push('/')\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n    },\r\n    variables: values,\r\n  })\r\n\r\n  function loginUserCallback() {\r\n    loginUser()\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n        <h1>Login</h1>\r\n        <Form.Input\r\n          label=\"Username\"\r\n          placeholder=\"Username..\"\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={values.username}\r\n          error={errors.username ? true : null}\r\n          onChange={onChange}\r\n          autoCapitalize='none'\r\n          style={{ fontSize: 16 }}\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          placeholder=\"Password..\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={values.password}\r\n          error={errors.password ? true : null}\r\n          onChange={onChange}\r\n          style={{ fontSize: 16 }}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Login\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((value) => (\r\n              <li key={value}>{value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Login\r\n","import React, { useContext, useState } from 'react'\r\nimport { Button, Form } from 'semantic-ui-react'\r\nimport { useMutation } from '@apollo/client'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport { useForm } from '../util/hooks'\r\nimport { REGISTER_USER } from '../util/graphql'\r\n\r\nconst Register = (props) => {\r\n  const context = useContext(AuthContext)\r\n  const [errors, setErrors] = useState({})\r\n\r\n  const { onChange, onSubmit, values } = useForm(registerUser, {\r\n    username: '',\r\n    email: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n  })\r\n\r\n  const [addUser, { loading }] = useMutation(REGISTER_USER, {\r\n    update(_, { data: { register: userData } }) {\r\n      context.login(userData)\r\n      props.history.push('/')\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors)\r\n    },\r\n    variables: values,\r\n  })\r\n\r\n  function registerUser() {\r\n    addUser()\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <Form onSubmit={onSubmit} noValidate className={loading ? 'loading' : ''}>\r\n        <h1>Register</h1>\r\n        <Form.Input\r\n          label=\"Username\"\r\n          placeholder=\"Username..\"\r\n          name=\"username\"\r\n          type=\"text\"\r\n          value={values.username}\r\n          error={errors.username ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Email\"\r\n          placeholder=\"Email..\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={values.email}\r\n          error={errors.email ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Password\"\r\n          placeholder=\"Password..\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          value={values.password}\r\n          error={errors.password ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Form.Input\r\n          label=\"Confirm Password\"\r\n          placeholder=\"Confirm Password..\"\r\n          name=\"confirmPassword\"\r\n          type=\"password\"\r\n          value={values.confirmPassword}\r\n          error={errors.confirmPassword ? true : false}\r\n          onChange={onChange}\r\n        />\r\n        <Button type=\"submit\" primary>\r\n          Register\r\n        </Button>\r\n      </Form>\r\n      {Object.keys(errors).length > 0 && (\r\n        <div className=\"ui error message\">\r\n          <ul className=\"list\">\r\n            {Object.values(errors).map((value) => (\r\n              <li key={value}>{value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Register\r\n","import React, { useContext, useState, useRef } from 'react'\r\nimport {\r\n  useQuery,\r\n  useMutation,\r\n  useSubscription,\r\n  useApolloClient,\r\n} from '@apollo/client'\r\nimport moment from 'moment'\r\nimport { Button, Card, Form, Grid } from 'semantic-ui-react'\r\n//import { isMobile } from 'react-device-detect'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport DeleteButton from '../components/DeleteButton'\r\nimport PostCard from '../components/PostCard'\r\nimport {\r\n  FETCH_POST_QUERY,\r\n  SUBMIT_COMMENT_MUTATION,\r\n  COMMENT_ADDED,\r\n  COMMENT_DELETED,\r\n  LIKE_ADDED,\r\n  LIKE_DELETED\r\n} from '../util/graphql'\r\nimport theme from '../theme'\r\n\r\nfunction SinglePost(props) {\r\n  const postId = props.match.params.postId\r\n  const { user } = useContext(AuthContext)\r\n  const commentInputRef = useRef(null)\r\n  const client = useApolloClient()\r\n\r\n  const [comment, setComment] = useState('')\r\n\r\n  const { loading, data } = useQuery(FETCH_POST_QUERY, {\r\n    variables: {\r\n      postId,\r\n    },\r\n  })\r\n\r\n  const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\r\n    update() {\r\n      setComment('')\r\n      commentInputRef.current.blur()\r\n    },\r\n    variables: {\r\n      postId,\r\n      body: comment,\r\n    },\r\n  })\r\n\r\n  const updateCacheWith = (addedComment) => {\r\n    const dataInStore = client.readQuery({\r\n      query: FETCH_POST_QUERY,\r\n      variables: { postId },\r\n    })\r\n    client.writeQuery({\r\n      query: FETCH_POST_QUERY,\r\n      variables: { postId },\r\n      data: {\r\n        getPost: {\r\n          comments: dataInStore.getPost.comments.concat(addedComment),\r\n        },\r\n      },\r\n    })\r\n  }\r\n\r\n  useSubscription(COMMENT_ADDED, {\r\n    onSubscriptionData: ({ subscriptionData }) => {\r\n      const addedComment = subscriptionData.data.newComment\r\n      console.log(addedComment)\r\n      updateCacheWith(addedComment)\r\n    },\r\n  })\r\n\r\n  const updateCacheWithDelCom = (delComment) => {\r\n    const dataInStore = client.readQuery({\r\n      query: FETCH_POST_QUERY,\r\n      variables: { postId },\r\n    })\r\n    const commentsAfter = dataInStore.getPost.comments.filter(c => c.id !== delComment.id)\r\n    client.writeQuery({\r\n      query: FETCH_POST_QUERY,\r\n      variables: { postId },\r\n      data: {\r\n        getPost: { comments: commentsAfter },\r\n      },\r\n    })\r\n  }\r\n\r\n  useSubscription(COMMENT_DELETED, {\r\n    onSubscriptionData: ({ subscriptionData }) => {\r\n      const delComment = subscriptionData.data.deletedComment\r\n      console.log(delComment)\r\n      updateCacheWithDelCom(delComment)\r\n    },\r\n  })\r\n\r\n  const updateCacheWithLike = (addedLike) => {\r\n    const dataInStore = client.readQuery({\r\n      query: FETCH_POST_QUERY,\r\n      variables: { postId },\r\n    })\r\n    client.writeQuery({\r\n      query: FETCH_POST_QUERY,\r\n      variables: { postId },\r\n      data: {\r\n        getPost: {\r\n          likes: dataInStore.getPost.likes.concat(addedLike),\r\n        },\r\n      },\r\n    })\r\n  }\r\n\r\n  useSubscription(LIKE_ADDED, {\r\n    onSubscriptionData: ({ subscriptionData }) => {\r\n      const addedLike = subscriptionData.data.newLike\r\n      console.log(addedLike)\r\n      updateCacheWithLike(addedLike)\r\n    },\r\n  })\r\n\r\n  const updateCacheWithDelLike = (delLike) => {\r\n    const dataInStore = client.readQuery({\r\n      query: FETCH_POST_QUERY,\r\n      variables: { postId },\r\n    })\r\n    const likesAfter = dataInStore.getPost.likes.filter(c => c.id !== delLike.id)\r\n    client.writeQuery({\r\n      query: FETCH_POST_QUERY,\r\n      variables: { postId },\r\n      data: {\r\n        getPost: {\r\n          likes: likesAfter,\r\n        },\r\n      },\r\n    })\r\n  }\r\n\r\n  useSubscription(LIKE_DELETED, {\r\n    onSubscriptionData: ({ subscriptionData }) => {\r\n      const delLike = subscriptionData.data.deletedLike\r\n      console.log(delLike)\r\n      updateCacheWithDelLike(delLike)\r\n    },\r\n  })\r\n\r\n  if (loading) {\r\n    return <div>loading...</div>\r\n  }\r\n\r\n  let postMarkup\r\n  if (!data) {\r\n    postMarkup = <p>Loading post..</p>\r\n  } else {\r\n    const {\r\n      id,\r\n      comments,\r\n    } = data.getPost\r\n\r\n    postMarkup = (\r\n      <Grid>\r\n        <Grid.Row>\r\n          <Grid.Column>\r\n            <PostCard post={data.getPost}/>\r\n            {user && (\r\n              <Card fluid>\r\n                <Card.Content>\r\n                  <p>Post a comment</p>\r\n                  <Form>\r\n                    <div className=\"ui action input fluid\">\r\n                      <input\r\n                        type=\"text\"\r\n                        placeholder=\"Comment...\"\r\n                        name=\"comment\"\r\n                        value={comment}\r\n                        onChange={(event) => setComment(event.target.value)}\r\n                        ref={commentInputRef}\r\n                        style={{ fontSize: 16 }}\r\n                      />\r\n                      <Button\r\n                        type=\"submit\"\r\n                        color={theme.colors.primary}\r\n                        disabled={comment.trim() === ''}\r\n                        onClick={submitComment}\r\n                      >\r\n                        Submit\r\n                      </Button>\r\n                    </div>\r\n                  </Form>\r\n                </Card.Content>\r\n              </Card>\r\n            )}\r\n            {comments.map((comment) => (\r\n              <Card fluid key={comment.id}>\r\n                <Card.Content>\r\n                  {user && user.username === comment.username && (\r\n                    <DeleteButton postId={id} commentId={comment.id} />\r\n                  )}\r\n                  <Card.Header>{comment.username}</Card.Header>\r\n                  <Card.Meta>{moment(comment.createdAt).fromNow()}</Card.Meta>\r\n                  <Card.Description>{comment.body}</Card.Description>\r\n                </Card.Content>\r\n              </Card>\r\n            ))}\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    )\r\n  }\r\n  return postMarkup\r\n}\r\n\r\nexport default SinglePost\r\n","import React, { useContext } from 'react'\r\nimport { useQuery, useApolloClient, useSubscription } from '@apollo/client'\r\nimport { isMobile } from 'react-device-detect'\r\nimport { Grid, Transition } from 'semantic-ui-react'\r\nimport { useRouteMatch } from 'react-router-dom'\r\n\r\nimport { AuthContext } from '../context/auth'\r\nimport { FETCH_POSTS_QUERY, POST_ADDED, POST_DELETED } from '../util/graphql'\r\nimport PostCard from '../components/PostCard'\r\n\r\nconst User = () => {\r\n  const match = useRouteMatch('/users/:userId')\r\n  const { user } = useContext(AuthContext)\r\n  const userId = match ? match.params.userId : user.id\r\n  const { loading, data } = useQuery(FETCH_POSTS_QUERY, {\r\n    variables: {\r\n      userId: userId,\r\n    },\r\n    pollInterval: 10000,\r\n  })\r\n\r\n  const client = useApolloClient()\r\n\r\n  const updateCacheWith = (addedPost) => {\r\n    const includedIn = (set, object) => set.map((p) => p.id).includes(object.id)\r\n\r\n    const dataInStore = client.readQuery({\r\n      query: FETCH_POSTS_QUERY,\r\n      variables: {\r\n        userId: userId,\r\n      },\r\n    })\r\n    if (!includedIn(dataInStore.getPosts, addedPost)) {\r\n      client.writeQuery({\r\n        query: FETCH_POSTS_QUERY,\r\n        data: { getPosts: dataInStore.getPosts.concat(addedPost) },\r\n        variables: {\r\n          userId: userId,\r\n        },\r\n      })\r\n    }\r\n  }\r\n\r\n  useSubscription(POST_ADDED, {\r\n    onSubscriptionData: ({ subscriptionData }) => {\r\n      console.log(subscriptionData)\r\n      const addedPost = subscriptionData.data.newPost\r\n      updateCacheWith(addedPost)\r\n    },\r\n  })\r\n\r\n  const updateCacheWithDel = (delPost) => {\r\n    const dataInStore = client.readQuery({\r\n      query: FETCH_POSTS_QUERY,\r\n      variables: {\r\n        userId: userId,\r\n      },\r\n    })\r\n    const postsAfter = dataInStore.getPosts.filter((p) => p.id !== delPost.id)\r\n    client.writeQuery({\r\n      query: FETCH_POSTS_QUERY,\r\n      data: { getPosts: postsAfter },\r\n      variables: {\r\n        userId: userId,\r\n      },\r\n    })\r\n  }\r\n\r\n  useSubscription(POST_DELETED, {\r\n    onSubscriptionData: ({ subscriptionData }) => {\r\n      console.log(subscriptionData)\r\n      const delPost = subscriptionData.data.deletedPost\r\n      updateCacheWithDel(delPost)\r\n    },\r\n  })\r\n\r\n  if (loading) {\r\n    return <div>loading...</div>\r\n  }\r\n\r\n  const posts = data.getPosts\r\n  const columns = isMobile ? 1 : 3\r\n\r\n  if (posts.length < 1) {\r\n    return (\r\n      <div>\r\n        <Grid>\r\n          <Grid.Row className=\"page-title\">\r\n            <h1>{user.username}</h1>\r\n          </Grid.Row>\r\n          <Grid.Row>\r\n            <h3>No posts yet</h3>\r\n          </Grid.Row>\r\n        </Grid>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Grid>\r\n        <Grid.Row className=\"page-title\">\r\n          <h1>{posts[0].username}</h1>\r\n        </Grid.Row>\r\n        <Grid.Row columns={columns}>\r\n          {loading ? (\r\n            <h1>Loading posts..</h1>\r\n          ) : (\r\n            <Transition.Group>\r\n              {posts &&\r\n                posts.map((post) => (\r\n                  <Grid.Column key={post.id} style={{ marginBottom: 20 }}>\r\n                    <PostCard post={post} />\r\n                  </Grid.Column>\r\n                ))}\r\n            </Transition.Group>\r\n          )}\r\n        </Grid.Row>\r\n      </Grid>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default User\r\n","import React from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport { Container } from 'semantic-ui-react'\nimport './App.css'\nimport 'semantic-ui-css/semantic.min.css'\n\nimport { AuthProvider } from './context/auth'\nimport AuthRoute from './util/AuthRoute'\nimport NonAuthRoute from './util/NonAuthRoute'\n\nimport MenuBar from './components/MenuBar'\nimport Home from './pages/Home'\nimport Login from './pages/Login'\nimport Register from './pages/Register'\nimport SinglePost from './pages/SinglePost'\nimport User from './pages/User'\n\nfunction App() {\n\n  return (\n    <AuthProvider>\n      <Router>\n        <Container>\n          <MenuBar />\n          <Route exact path=\"/\" component={Home} />\n          <AuthRoute exact path=\"/login\" component={Login} />\n          <AuthRoute exact path=\"/register\" component={Register} />\n          <Route exact path=\"/posts/:postId\" component={SinglePost} />\n          <Route exact path=\"/users/:userId\" component={User} />\n          <NonAuthRoute exact path=\"/me\" component={User} />\n        </Container>\n      </Router>\n    </AuthProvider>\n  )\n}\n\nexport default App\n","import React from 'react'\r\nimport App from './App'\r\nimport {\r\n  ApolloClient,\r\n  ApolloProvider,\r\n  HttpLink,\r\n  InMemoryCache,\r\n  split\r\n} from '@apollo/client'\r\n\r\nimport { setContext } from 'apollo-link-context'\r\n\r\nimport { getMainDefinition } from '@apollo/client/utilities'\r\nimport { WebSocketLink } from '@apollo/client/link/ws'\r\n\r\n//const httpURL = window.location.origin.concat(\"/graphql\")\r\n//console.log(httpURL)\r\n\r\nconst httpLink = new HttpLink({ uri: \"/graphql\" })\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('jwtToken')\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      Authorization: token ? `Bearer ${token}` : null,\r\n    }\r\n  }\r\n})\r\n\r\nconst wsURL = window.location.origin.replace(/^http/, 'ws').concat(\"/graphql\")\r\n//console.log(wsURL)\r\n\r\nconst wsLink = new WebSocketLink({\r\n  uri: wsURL,\r\n  options: {\r\n    reconnect: true\r\n  }\r\n})\r\nconst splitLink = split(\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query)\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    )\r\n  },\r\n  wsLink,\r\n  authLink.concat(httpLink),\r\n)\r\n\r\nconst client = new ApolloClient({\r\n  cache: new InMemoryCache(),\r\n  link: splitLink\r\n})\r\n\r\nexport default (\r\n  <ApolloProvider client={client}>\r\n    <App />\r\n  </ApolloProvider>\r\n)\r\n","import ReactDOM from 'react-dom';\nimport ApolloProvider from './ApolloProvider';\n\nReactDOM.render(\n    ApolloProvider,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}